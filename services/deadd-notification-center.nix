{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.services.deadd-notification-center;

  eitherStrBoolIntList = with types;
    either str (either bool (either int (listOf str)));

  # toDeaddYml = generators.toYAML {
  #   mkKeyValue = key: value:
  #     let
  #       value' =
  #         if isBool value then
  #           (lib.hm.booleans.yesNo value)
  #         else if isString value then
  #           ''"${value}"''
  #         else
  #           toString value;
  #     in
  #     "${key}=${value'}";
  # };

in
{
  # meta.maintainers = [ maintainers.rycee ];

  options = {
    services.deadd-notification-center = {
      enable = mkEnableOption "the deadd notification daemon";

      package = mkOption {
        type = types.package;
        default = pkgs.deadd-notification-center;
        defaultText = literalExpression "pkgs.deadd-notification-center";
        description = "Package providing {command}`deadd-notification-center`.";
      };

      configFile = mkOption {
        type = with types; either str path;
        default = "${config.xdg.configHome}/deadd/deadd.yml";
        defaultText = "$XDG_CONFIG_HOME/deadd/deadd.yml";
        description = ''
          Path to the configuration file read by deadd.

          Note that the configuration generated by Home Manager will be
          written to {file}`$XDG_CONFIG_HOME/deadd/deadd.yml`
          regardless. This allows using a mutable configuration file generated
          from the immutable one, useful in scenarios where live reloading is
          desired.
        '';
      };

      # iconTheme = mkOption {
      #   type = themeType;
      #   default = hicolorTheme;
      #   description = "Set the icon theme.";
      # };

      settings = mkOption {
        type = types.submodule {
          freeformType = with types; attrsOf (attrsOf eitherStrBoolIntList);
          # options = {
          #   # global.icon_path = mkOption {
          #   #   type = types.separatedString ":";
          #   #   description = "Paths where dunst will look for icons.";
          #   # };
          # };
        };
        default = { };
        description =
          "Configuration written to {file}`$XDG_CONFIG_HOME/deadd/deadd.yml`.";
        example = literalExpression ''
          {
            TODO
          };
        '';
      };
    };
  };

  config = mkIf cfg.enable (mkMerge [
    {
      assertions = [
        (hm.assertions.assertPlatform "services.deadd-notification-center" pkgs platforms.linux)
      ];

      home.packages = [ cfg.package ];

      # xdg.dataFile."dbus-1/services/org.knopwob.dunst.service".source =
      #   "${pkgs.dunst}/share/dbus-1/services/org.knopwob.dunst.service";

      # services.dunst.settings.global.icon_path =
      #   let
      #     useCustomTheme = cfg.iconTheme.package != hicolorTheme.package
      #       || cfg.iconTheme.name != hicolorTheme.name || cfg.iconTheme.size
      #       != hicolorTheme.size;

      #     basePaths = [
      #       "/run/current-system/sw"
      #       config.home.profileDirectory
      #       cfg.iconTheme.package
      #     ] ++ optional useCustomTheme hicolorTheme.package;

      #     themes = [ cfg.iconTheme ] ++ optional useCustomTheme
      #       (hicolorTheme // { size = cfg.iconTheme.size; });

      #     categories = [
      #       "actions"
      #       "animations"
      #       "apps"
      #       "categories"
      #       "devices"
      #       "emblems"
      #       "emotes"
      #       "filesystem"
      #       "intl"
      #       "legacy"
      #       "mimetypes"
      #       "places"
      #       "status"
      #       "stock"
      #     ];

      #     mkPath = { basePath, theme, category }:
      #       "${basePath}/share/icons/${theme.name}/${theme.size}/${category}";
      #   in
      #   concatMapStringsSep ":" mkPath (cartesianProductOfSets {
      #     basePath = basePaths;
      #     theme = themes;
      #     category = categories;
      #   });

      systemd.user.services.deadd = {
        Unit = {
          Description = "Deadd notification daemon";
          After = [ "graphical-session-pre.target" ];
          PartOf = [ "graphical-session.target" ];
        };

        Service = {
          Type = "dbus";
          BusName = "org.freedesktop.Notifications";
          ExecStart = "${cfg.package}/bin/deadd-notification-center --config ${cfg.configFile}";
          # Environment = optionalString (cfg.waylandDisplay != "")
          #   "WAYLAND_DISPLAY=${cfg.waylandDisplay}";
        };
      };
    }

    (mkIf (cfg.settings != { }) {
      xdg.configFile."deadd/deadd.yml" = {
        text = lib.generators.toYAML { } cfg.settings;
        onChange = ''
          ${pkgs.procps}/bin/pkill -u "$USER" ''${VERBOSE+-e} deadd-notification-center || true
        '';
      };
    })
  ]);
}
